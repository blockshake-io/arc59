{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc59_optRouterIn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_getOrCreateInbox(address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_getAssetSendInfo(address,uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_sendAsset(axfer,address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_claim(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_burn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_reject(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc59_getInbox(address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "burnApp": {
          "type": "uint64",
          "key": "burnApp"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC59",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Deploy ARC59 contract and set the app ID of the ARC54 app to use for burning",
        "args": [
          {
            "name": "burnApp",
            "type": "uint64",
            "desc": "The ARC54 app ID"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc59_optRouterIn",
        "desc": "Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.",
        "args": [
          {
            "name": "asa",
            "type": "uint64",
            "desc": "The ASA to opt into"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc59_getOrCreateInbox",
        "desc": "Gets the existing inbox for the receiver or creates a new one if it does not exist",
        "args": [
          {
            "name": "receiver",
            "type": "address",
            "desc": "The address to get or create the inbox for"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The inbox address"
        }
      },
      {
        "name": "arc59_getAssetSendInfo",
        "args": [
          {
            "name": "receiver",
            "type": "address",
            "desc": "The address to send the asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to send"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)",
          "desc": "The number of itxns sent and the MBR required to send the asset to the receiver"
        }
      },
      {
        "name": "arc59_sendAsset",
        "desc": "Send an asset to the receiver",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "The asset transfer to this app"
          },
          {
            "name": "receiver",
            "type": "address",
            "desc": "The address to send the asset to"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address that the asset was sent to (either the receiver or their inbox)"
        }
      },
      {
        "name": "arc59_claim",
        "desc": "Claim an ASA from the inbox",
        "args": [
          {
            "name": "asa",
            "type": "uint64",
            "desc": "The ASA to claim"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc59_burn",
        "desc": "Burn the ASA from the inbox with ARC54. Sends all non-MBR balance to caller.If the ARC54 app is not opted in:- The ASA MBR in the inbox will be sent to the ARC54 app.- A total of 5 inner transactions will be sent.If the ARC54 app is opted in:- A total of 2 inner transactions will be sent.- The ASA MBR in the inbox will be sent to the caller.",
        "args": [
          {
            "name": "asa",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc59_reject",
        "desc": "Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.",
        "args": [
          {
            "name": "asa",
            "type": "uint64",
            "desc": "The ASA to reject"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc59_getInbox",
        "desc": "Get the inbox address for the given receiver",
        "args": [
          {
            "name": "receiver",
            "type": "address",
            "desc": "The receiver to get the inbox for"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Zero address if the receiver does not yet have an inbox, otherwise the inbox address"
        }
      }
    ]
  }
}