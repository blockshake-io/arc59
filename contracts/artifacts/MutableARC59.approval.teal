#pragma version 10

// This TEAL was generated by TEALScript v0.90.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// burnApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

// createApplication(burnApp: AppID): void
//
// Deploy ARC59 contract and set the app ID of the ARC54 app to use for burning
//
// @param burnApp The ARC54 app ID
createApplication:
	proto 1 0

	// contracts/arc59.algo.ts:29
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/arc59.algo.ts:30
	// assert(this.burnApp.value.id === 0)
	byte 0x6275726e417070 // "burnApp"
	app_global_get
	int 0
	==
	assert

	// contracts/arc59.algo.ts:31
	// this.burnApp.value = burnApp
	byte 0x6275726e417070 // "burnApp"
	frame_dig -1 // burnApp: AppID
	app_global_put
	retsub

// arc59_optRouterIn(uint64)void
*abi_route_arc59_optRouterIn:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_optRouterIn(uint64)void
	callsub arc59_optRouterIn
	int 1
	return

// arc59_optRouterIn(asa: AssetID): void
//
// Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
//
// @param asa The ASA to opt into
arc59_optRouterIn:
	proto 1 0

	// contracts/arc59.algo.ts:40
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: asa,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:41
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:42
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:43
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_getOrCreateInbox(address)address
*abi_route_arc59_getOrCreateInbox:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc59_getOrCreateInbox(address)address
	callsub arc59_getOrCreateInbox
	concat
	log
	int 1
	return

// arc59_getOrCreateInbox(receiver: Address): Address
//
// Gets the existing inbox for the receiver or creates a new one if it does not exist
//
// @param receiver The address to get or create the inbox for
// @returns The inbox address
arc59_getOrCreateInbox:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if0_condition
	// contracts/arc59.algo.ts:54
	// this.inboxes(receiver).exists
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// contracts/arc59.algo.ts:54
	// return this.inboxes(receiver).value;
	frame_dig -1 // receiver: Address
	box_get
	assert
	b *arc59_getOrCreateInbox*return

*if0_end:
	// contracts/arc59.algo.ts:56
	// inbox = sendMethodCall<typeof ControlledAddress.prototype.new>({
	//       onCompletion: OnCompletion.DeleteApplication,
	//       approvalProgram: ControlledAddress.approvalProgram(),
	//       clearStateProgram: ControlledAddress.clearProgram(),
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "new()address"
	itxn_field ApplicationArgs

	// contracts/arc59.algo.ts:57
	// onCompletion: OnCompletion.DeleteApplication
	int 5 // DeleteApplication
	itxn_field OnCompletion

	// contracts/arc59.algo.ts:58
	// approvalProgram: ControlledAddress.approvalProgram()
	byte b64 CiABATEYFIEGCzEZCI0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAIAEFR98dYgABFCwIkOKAAGxIrIQMQCyIIEAsgGzMgqJgARWHS/qNhoAjgH/0wA=
	itxn_field ApprovalProgram

	// contracts/arc59.algo.ts:59
	// clearStateProgram: ControlledAddress.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:62
	// this.inboxes(receiver).value = inbox
	frame_dig -1 // receiver: Address
	frame_dig 0 // inbox: address
	box_put

	// contracts/arc59.algo.ts:64
	// return inbox;
	frame_dig 0 // inbox: address

*arc59_getOrCreateInbox*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc59_getAssetSendInfo(address,uint64)(uint64,uint64)
*abi_route_arc59_getAssetSendInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc59_getAssetSendInfo(address,uint64)(uint64,uint64)
	callsub arc59_getAssetSendInfo
	concat
	log
	int 1
	return

// arc59_getAssetSendInfo(receiver: Address, asset: AssetID): { itxns: uint64; mbr: uint64 }
//
//
// @param receiver The address to send the asset to
// @param asset The asset to send
//
// @returns The number of itxns sent and the MBR required to send the asset to the receiver
arc59_getAssetSendInfo:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/arc59.algo.ts:75
	// info: { itxns: uint64; mbr: uint64 } = { itxns: 1, mbr: 0 }
	byte 0x00000000000000010000000000000000
	frame_bury 0 // info: { itxns: uint64; mbr: uint64 }

	// *if1_condition
	// contracts/arc59.algo.ts:77
	// receiver.isOptedInToAsset(asset)
	frame_dig -1 // receiver: Address
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	bz *if1_end

	// *if1_consequent
	// contracts/arc59.algo.ts:77
	// return info;
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	b *arc59_getAssetSendInfo*return

*if1_end:
	// *if2_condition
	// contracts/arc59.algo.ts:79
	// !this.inboxes(receiver).exists
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	!
	bz *if2_end

	// *if2_consequent
	// contracts/arc59.algo.ts:83
	// info.itxns += 4
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	int 0
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	extract 0 8
	btoi
	int 4
	+
	itob
	replace3
	frame_bury 0 // info: { itxns: uint64; mbr: uint64 }

	// contracts/arc59.algo.ts:86
	// preMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 1 // preMBR: uint64

	// contracts/arc59.algo.ts:87
	// this.inboxes(receiver).value = globals.zeroAddress
	frame_dig -1 // receiver: Address
	global ZeroAddress
	box_put

	// contracts/arc59.algo.ts:88
	// boxMbrDelta = globals.currentApplicationAddress.minBalance - preMBR
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig 1 // preMBR: uint64
	-
	frame_bury 2 // boxMbrDelta: uint64

	// contracts/arc59.algo.ts:89
	// this.inboxes(receiver).delete()
	frame_dig -1 // receiver: Address
	box_del

	// contracts/arc59.algo.ts:92
	// info.mbr = boxMbrDelta + globals.minBalance + globals.assetOptInMinBalance
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	int 8 // headOffset
	frame_dig 2 // boxMbrDelta: uint64
	global MinBalance
	+
	global AssetOptInMinBalance
	+
	itob
	replace3
	frame_bury 0 // info: { itxns: uint64; mbr: uint64 }

	// contracts/arc59.algo.ts:94
	// return info;
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	b *arc59_getAssetSendInfo*return

*if2_end:
	// contracts/arc59.algo.ts:97
	// inbox = this.inboxes(receiver).value
	frame_dig -1 // receiver: Address
	box_get
	assert
	frame_bury 3 // inbox: address

	// *if3_condition
	// contracts/arc59.algo.ts:99
	// !inbox.isOptedInToAsset(asset)
	frame_dig 3 // inbox: address
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	bz *if3_end

	// *if3_consequent
	// contracts/arc59.algo.ts:101
	// info.itxns += 1
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	int 0
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	extract 0 8
	btoi
	int 1
	+
	itob
	replace3
	frame_bury 0 // info: { itxns: uint64; mbr: uint64 }

	// *if4_condition
	// contracts/arc59.algo.ts:103
	// !(inbox.balance >= inbox.minBalance + globals.assetOptInMinBalance)
	frame_dig 3 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 3 // inbox: address
	acct_params_get AcctMinBalance
	pop
	global AssetOptInMinBalance
	+
	>=
	!
	bz *if4_end

	// *if4_consequent
	// contracts/arc59.algo.ts:105
	// info.itxns += 1
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	int 0
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	extract 0 8
	btoi
	int 1
	+
	itob
	replace3
	frame_bury 0 // info: { itxns: uint64; mbr: uint64 }

	// contracts/arc59.algo.ts:108
	// info.mbr = globals.assetOptInMinBalance
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }
	int 8 // headOffset
	global AssetOptInMinBalance
	itob
	replace3
	frame_bury 0 // info: { itxns: uint64; mbr: uint64 }

*if4_end:

*if3_end:
	// contracts/arc59.algo.ts:112
	// return info;
	frame_dig 0 // info: { itxns: uint64; mbr: uint64 }

*arc59_getAssetSendInfo*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// arc59_sendAsset(axfer,address)address
*abi_route_arc59_sendAsset:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute arc59_sendAsset(axfer,address)address
	callsub arc59_sendAsset
	concat
	log
	int 1
	return

// arc59_sendAsset(axfer: AssetTransferTxn, receiver: Address): Address
//
// Send an asset to the receiver
//
// @param receiver The address to send the asset to
// @param axfer The asset transfer to this app
//
// @returns The address that the asset was sent to (either the receiver or their inbox)
arc59_sendAsset:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/arc59.algo.ts:124
	// verifyAssetTransferTxn(axfer, {
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// *if5_condition
	// contracts/arc59.algo.ts:129
	// receiver.isOptedInToAsset(axfer.xferAsset)
	frame_dig -2 // receiver: Address
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	asset_holding_get AssetBalance
	swap
	pop
	bz *if5_end

	// *if5_consequent
	// contracts/arc59.algo.ts:130
	// sendAssetTransfer({
	//         assetReceiver: receiver,
	//         assetAmount: axfer.assetAmount,
	//         xferAsset: axfer.xferAsset,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:131
	// assetReceiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:132
	// assetAmount: axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:133
	// xferAsset: axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:136
	// return receiver;
	frame_dig -2 // receiver: Address
	b *arc59_sendAsset*return

*if5_end:
	// contracts/arc59.algo.ts:139
	// inboxExisted = this.inboxes(receiver).exists
	frame_dig -2 // receiver: Address
	box_len
	swap
	pop
	frame_bury 0 // inboxExisted: bool

	// contracts/arc59.algo.ts:140
	// inbox = this.arc59_getOrCreateInbox(receiver)
	frame_dig -2 // receiver: Address
	callsub arc59_getOrCreateInbox
	frame_bury 1 // inbox: address

	// *if6_condition
	// contracts/arc59.algo.ts:142
	// !inbox.isOptedInToAsset(axfer.xferAsset)
	frame_dig 1 // inbox: address
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	asset_holding_get AssetBalance
	swap
	pop
	!
	bz *if6_end

	// *if6_consequent
	// contracts/arc59.algo.ts:143
	// inboxMbrDelta = globals.assetOptInMinBalance
	global AssetOptInMinBalance
	frame_bury 2 // inboxMbrDelta: uint64

	// *if7_condition
	// contracts/arc59.algo.ts:144
	// !inboxExisted
	frame_dig 0 // inboxExisted: bool
	!
	bz *if7_end

	// *if7_consequent
	// contracts/arc59.algo.ts:144
	// inboxMbrDelta += globals.minBalance
	frame_dig 2 // inboxMbrDelta: uint64
	global MinBalance
	+
	frame_bury 2 // inboxMbrDelta: uint64

*if7_end:
	// *if8_condition
	// contracts/arc59.algo.ts:147
	// inbox.balance < inbox.minBalance + inboxMbrDelta
	frame_dig 1 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 1 // inbox: address
	acct_params_get AcctMinBalance
	pop
	frame_dig 2 // inboxMbrDelta: uint64
	+
	<
	bz *if8_end

	// *if8_consequent
	// contracts/arc59.algo.ts:148
	// sendPayment({
	//           receiver: inbox,
	//           amount: inboxMbrDelta,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:149
	// receiver: inbox
	frame_dig 1 // inbox: address
	itxn_field Receiver

	// contracts/arc59.algo.ts:150
	// amount: inboxMbrDelta
	frame_dig 2 // inboxMbrDelta: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if8_end:
	// contracts/arc59.algo.ts:155
	// sendAssetTransfer({
	//         sender: inbox,
	//         assetReceiver: inbox,
	//         assetAmount: 0,
	//         xferAsset: axfer.xferAsset,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:156
	// sender: inbox
	frame_dig 1 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:157
	// assetReceiver: inbox
	frame_dig 1 // inbox: address
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:158
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:159
	// xferAsset: axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if6_end:
	// contracts/arc59.algo.ts:164
	// sendAssetTransfer({
	//       assetReceiver: inbox,
	//       assetAmount: axfer.assetAmount,
	//       xferAsset: axfer.xferAsset,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:165
	// assetReceiver: inbox
	frame_dig 1 // inbox: address
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:166
	// assetAmount: axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:167
	// xferAsset: axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:170
	// return inbox;
	frame_dig 1 // inbox: address

*arc59_sendAsset*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// arc59_claim(uint64)void
*abi_route_arc59_claim:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_claim(uint64)void
	callsub arc59_claim
	int 1
	return

// arc59_claim(asa: AssetID): void
//
// Claim an ASA from the inbox
//
// @param asa The ASA to claim
arc59_claim:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc59.algo.ts:179
	// inbox = this.inboxes(this.txn.sender).value
	txn Sender
	box_get
	assert
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:181
	// sendAssetTransfer({
	//       sender: inbox,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: inbox.assetBalance(asa),
	//       xferAsset: asa,
	//       assetCloseTo: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:182
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:183
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:184
	// assetAmount: inbox.assetBalance(asa)
	frame_dig 0 // inbox: address
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:185
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc59.algo.ts:186
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:189
	// sendPayment({
	//       sender: inbox,
	//       receiver: this.txn.sender,
	//       amount: inbox.balance - inbox.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:190
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:191
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc59.algo.ts:192
	// amount: inbox.balance - inbox.minBalance
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_burn(uint64)void
*abi_route_arc59_burn:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_burn(uint64)void
	callsub arc59_burn
	int 1
	return

// arc59_burn(asa: AssetID): void
//
// Burn the ASA from the inbox with ARC54. Sends all non-MBR balance to caller.
//
// If the ARC54 app is not opted in:
// - The ASA MBR in the inbox will be sent to the ARC54 app.
// - A total of 5 inner transactions will be sent.
//
// If the ARC54 app is opted in:
// - A total of 2 inner transactions will be sent.
// - The ASA MBR in the inbox will be sent to the caller.
arc59_burn:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/arc59.algo.ts:208
	// inbox = this.inboxes(this.txn.sender).value
	txn Sender
	box_get
	assert
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:209
	// arc54OptedIn = this.burnApp.value.address.isOptedInToAsset(asa)
	byte 0x6275726e417070 // "burnApp"
	app_global_get
	app_params_get AppAddress
	pop
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	frame_bury 1 // arc54OptedIn: bool

	// *if9_condition
	// contracts/arc59.algo.ts:212
	// !arc54OptedIn
	frame_dig 1 // arc54OptedIn: bool
	!
	bz *if9_end

	// *if9_consequent
	// contracts/arc59.algo.ts:213
	// sendPayment({
	//         sender: inbox,
	//         receiver: this.burnApp.value.address,
	//         amount: globals.assetOptInMinBalance,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:214
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:215
	// receiver: this.burnApp.value.address
	byte 0x6275726e417070 // "burnApp"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts/arc59.algo.ts:216
	// amount: globals.assetOptInMinBalance
	global AssetOptInMinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:219
	// sendMethodCall<typeof ARC54.prototype.arc54_optIntoASA>({
	//         sender: inbox,
	//         methodArgs: [asa],
	//         applicationID: this.burnApp.value,
	//       })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc54_optIntoASA(asset)void"
	itxn_field ApplicationArgs

	// contracts/arc59.algo.ts:220
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:221
	// methodArgs: [asa]
	frame_dig -1 // asa: AssetID
	itxn_field Assets
	byte 0x0000000000000000
	itxn_field ApplicationArgs

	// contracts/arc59.algo.ts:222
	// applicationID: this.burnApp.value
	byte 0x6275726e417070 // "burnApp"
	app_global_get
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if9_end:
	// contracts/arc59.algo.ts:226
	// sendAssetTransfer({
	//       sender: inbox,
	//       assetReceiver: this.burnApp.value.address,
	//       assetAmount: inbox.assetBalance(asa),
	//       xferAsset: asa,
	//       assetCloseTo: this.burnApp.value.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:227
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:228
	// assetReceiver: this.burnApp.value.address
	byte 0x6275726e417070 // "burnApp"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:229
	// assetAmount: inbox.assetBalance(asa)
	frame_dig 0 // inbox: address
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:230
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc59.algo.ts:231
	// assetCloseTo: this.burnApp.value.address
	byte 0x6275726e417070 // "burnApp"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:234
	// sendPayment({
	//       sender: inbox,
	//       receiver: this.txn.sender,
	//       amount: inbox.balance - inbox.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:235
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:236
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc59.algo.ts:237
	// amount: inbox.balance - inbox.minBalance
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_reject(uint64)void
*abi_route_arc59_reject:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_reject(uint64)void
	callsub arc59_reject
	int 1
	return

// arc59_reject(asa: AssetID): void
//
// Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.
// All non-MBR ALGO balance in the inbox will be sent to the caller.
//
// @param asa The ASA to reject
arc59_reject:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc59.algo.ts:248
	// inbox = this.inboxes(this.txn.sender).value
	txn Sender
	box_get
	assert
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:250
	// sendAssetTransfer({
	//       sender: inbox,
	//       assetReceiver: asa.creator,
	//       assetAmount: inbox.assetBalance(asa),
	//       xferAsset: asa,
	//       assetCloseTo: asa.creator,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:251
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:252
	// assetReceiver: asa.creator
	frame_dig -1 // asa: AssetID
	asset_params_get AssetCreator
	pop
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:253
	// assetAmount: inbox.assetBalance(asa)
	frame_dig 0 // inbox: address
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:254
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc59.algo.ts:255
	// assetCloseTo: asa.creator
	frame_dig -1 // asa: AssetID
	asset_params_get AssetCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:258
	// sendPayment({
	//       sender: inbox,
	//       receiver: this.txn.sender,
	//       amount: inbox.balance - inbox.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:259
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:260
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc59.algo.ts:261
	// amount: inbox.balance - inbox.minBalance
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_getInbox(address)address
*abi_route_arc59_getInbox:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc59_getInbox(address)address
	callsub arc59_getInbox
	concat
	log
	int 1
	return

// arc59_getInbox(receiver: Address): Address
//
// Get the inbox address for the given receiver
//
// @param receiver The receiver to get the inbox for
//
// @returns Zero address if the receiver does not yet have an inbox, otherwise the inbox address
arc59_getInbox:
	proto 1 1

	// contracts/arc59.algo.ts:273
	// return this.inboxes(receiver).exists ? this.inboxes(receiver).value : globals.zeroAddress;
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	bz *ternary0_false
	frame_dig -1 // receiver: Address
	box_get
	assert
	b *ternary0_end

*ternary0_false:
	global ZeroAddress

*ternary0_end:
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// contracts/mutable_arc59.algo.ts:5
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert
	retsub

*create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "arc59_optRouterIn(uint64)void"
	method "arc59_getOrCreateInbox(address)address"
	method "arc59_getAssetSendInfo(address,uint64)(uint64,uint64)"
	method "arc59_sendAsset(axfer,address)address"
	method "arc59_claim(uint64)void"
	method "arc59_burn(uint64)void"
	method "arc59_reject(uint64)void"
	method "arc59_getInbox(address)address"
	txna ApplicationArgs 0
	match *abi_route_arc59_optRouterIn *abi_route_arc59_getOrCreateInbox *abi_route_arc59_getAssetSendInfo *abi_route_arc59_sendAsset *abi_route_arc59_claim *abi_route_arc59_burn *abi_route_arc59_reject *abi_route_arc59_getInbox
	err

*call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication
	err